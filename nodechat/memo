웹소켓? 양방향 실시간 통신 기술 ( 프론트쪽과 서버 쪽에 둘 다 세팅해줄 필요가 있다. )
--> 단순히 서버에서 설정한다고 작동하는 것이 아니고, 클라이언트에서도 웹 소켓을 사용해야 함. 

socket.io --> ws 프로토콜이 아니라 http 프로토콜을 사용함. --> 먼저 폴링 방식으로 서버와 연결. 
--> 폴링 연결 후 웹소켓을 사용할 수 있으면 웹 소켓으로 업그레이드.

폴링(polling)? HTTP 가 클라이언트에서 서버로 향하는 단방향 통신. 업데이트가 있는지 없는지 확인하는 요청을 보냄. 

io와 socket 객체가 Socket.IO에서 핵심.
const io = SocketIO(server, { path : '/socket.io}) --> 익스프레스 서버와 연결함과 동시에, 클라이언트와 연결할 수 있는 경로.
io.on('connection', (socket) => {

    socket.on(event, callback) 
})  --> connection 이벤트 -- 클라이언트가 접속했을 때 발생. 그와 더불어 콜백 함수 동작.  + socket 객체에도 이벤트 리스너 설정 가능.(내가 직접 만들어도 됨. 지원해주는 것도 있음 ex. error, disconnect 등) 

--Socket.IO --> 네임스페이스(of) --> 방(join)
점점 세부적인 개념. 그 공간끼리만 소통을 함. 같은 네임스페이스 안에서도 같은 방에 들어 있는 소켓끼리만 데이터를 주고 받음.
--> 불필요한 실시간 정보가 전달되지 않음!! 

--익스프레스 미들웨어를 SOCKET.IO 에서 사용하는 방법.
    io.use((socket, next) => { 
        sessionMiddleware(socket.request, socket.request.res, next); // 세션미들웨어 커스터마이징
    });

npm i cookie-signature 의 사용 이유? 
express가 만든 세션 쿠키(req.signedCookies['connect.sid']) -->
클라이언트 ( 한 번 더 암호화?? 엄청 긴 이상한 string) --> 
다시 express로 들어올 떄(req.signedCookies['connect.sid']) --> 
axios 로 보낼 때( sign() 메서드로 아까 클라이언트 보낼 때랑 같은 한 번더 암호화? 된 긴 string) 

프론트 -> 서버 or 서버 -> 프론트 방향이 아니라, socket.emit( 'event' , ) -> socket.on( 'event' , ) 의 방향이 맞는 말!!
--------------------------------------
복습
express.json() --> req.body 를 사용할 수 있게끔. / JSON 형식의 데이터
express.urlencoded({extended: false}) --> req.body를 사용할 수 있게끔. / 주소 형식의 데이터 (보통 form 전송)
 