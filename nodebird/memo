1. 시작은 폴더를 만드는 것으로.
2. 만든 폴더로 이동 후, npm init --> package.json 만드는. packageManager/npmBegin.js 파일 참조.
3. npm i -g sequelize-cli
4. npm i sequelize mysql2
5. sequelize init
(config file 수정 후)
6. sequelize db:create
7. npm i -D nodemon --> 서버 코드가 변경될 때 알아서 재시작을 해줌. nodemon <파일명> --> 개발할 때만 필요함. devDependencis에 위치.
( 배포 때는 pm2? 나 forever 와 같은 다른 패키지를 쓴댜!)
8. npm i -g nodemon --> 명령프롬프트에서도 쓰기 때문에 전역설치.
9. generator 를 쓰지 않고 폴더의 구조를 짜보자! 

10. npm i dotenv  --> .env 라는 파일을 만들 수 있음.
  --> require('dotenv').config()  
  --> process.env 에 기록이 됨.
  --> 보안에 효과적!

(( sequelize 를 통해 테이블 만들어준 후, index 에서 관계 설정해주고, app.js 에 sequelize 등록!
    sequelize.sync()
))

11. npm i passport passport-local passport-kakao bcrypt --> 로그인을 위한 패키지. 실제 구현을 하기보다 모듈들을 끌어와서 쓰자. 
  --> 원리를 알아야 응용이 가능!! 

((
로그인 전략을 구현한 후,  app.js 에 등록.
   passportConfig(passport)
   app.use(passport.initialize())
   app.use(passport.session())
   ))

12. npm i multer --> 사진 업로드를 위한 패키지.
--> 이미지를 업로드하려면 input[type=file] 태그와 form tag 의 enctype 을 multipart/form-data(인코딩 타입). 로 함.
--> 이것을 해석(디코딩?)하려면 multer 가 필요하다.


13. 개발할 때는 개발용. 배포할 때는 배포용.  
    1. app.js 부분 수정.
    2. sequelize config 수정.
       config 파일을 js 파일로 변환. ( dotenv 사용 가능. )
    3. package.json 수정. 
    4. npm i -g cross-env ( 윈도우에서도 되게끔 )
    5. npm audit  + npm audit fix ( 취약점 검사 및 자동 수정)
    6. npm i pm2  + npm i -g pm2 ( pm2 를 써야 cloud 에서도 노드의 서버가 유지가 됨, node 를 background 에서 돌려줘서 우리는 다른 일을 할 수 있음)
       --> 싱글스레드인 node 의 취약점을 멀티코어를 쓰게끔 해서 보완함. ( fork mode 가 아닌  cluster mode. how?  -i 숫자. --> package.json 참조))
       pm2 list 
       pm2 restart all
       pm2 monit
       pm2 kill
       --> 개발할 때는 nodemon 배포할 때는 pm2 를 주로 많이 쓴다.
    7. npm i winston ( 서버가 종료되더라도 기록파일들을 남겨둠. ) + npm i winston-daily-rotate-file
    8. npm i helmet  + npm i hpp ( 보안 취약 극복 , option 기능으로 추가적으로 조절 가능 )
    9. npm i connect-redis + npm i redis ( 유지되는 세션. 서버가 재시작될 때 세션들이 다 날라가는 것을 방지? )
       --> DB는 웹서버와 분리하는 것을 원칙으로 하여 hosting 하는 것을 추천.
   10. nvm 설치 ( 노드 버전을 업데이트 하기 위한 패키지 )
       --> nvm list
       --> nvm install [version] 
       --> nvm use [version]
       
------------------------------------------
복습:
app.use 를 사용하므로 라우터도 역시 미들웨어.
express.ROUTER() 로 router 객체를 만듬. --> 이 router 객체가 또 여러 개의 미들웨어를 장착할 수 있음.
moudle.exports = router --> 나중에 재사용을 할 수도 있으니까. 
매 요청시 마다 app.js 가 작동하고 그 중간에 있는 미들웨어들이 작동하게 됨.